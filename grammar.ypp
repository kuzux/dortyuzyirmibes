%{
#include <stdio.h>
#include <string.h>

#include <string>
#include <vector>
#include "ast.h"

extern "C" {

int yylex();

void yyerror(const char *str) {
    extern int yylineno;
    fprintf(stderr,"error: %s at %d\n",str, yylineno);
}
 
int yywrap() {
    return 1;
} 

typedef struct lval {
    char* str;
    int n;
    ast_node_t* node;
    std::vector<ast_node_t*>* ns;
} lval_t;

#define YYSTYPE lval_t

ast_node_t* root;

}

%}

%token PROGRAM SEMICOLON DOT CONSTANTS EQUALS TYPES INTEGER ARRAY SQBR_ON SQBR_OFF OF RECORD END COLON COMMA VAR FORWARD PROCEDURE FUNCTION PAR_ON PAR_OFF CURLY_ON CURLY_OFF PRINT READ WHILE DO IF THEN ELSE EQ NEQ LT GT LEQ GEQ FOR COLON_EQ UPTO DOWNTO PLUS MINUS MULT DIV MOD NUMBER IDENTIFIER

%%

program: PROGRAM IDENTIFIER SEMICOLON progBlock DOT { $$ = $4; $$.node->val.prog.name = std::string($2.str); }

progBlock: constantDefns typeDefns varDefns procFuncDefns stmts { $$.node = prog_node($1.ns, $2.ns, $3.ns, $4.ns, $5.ns); }

block: varDefns stmts

constantDefns: /* empty */
             | CONSTANTS constantList
constantList: constantList constDefn
            | constDefn
constDefn: IDENTIFIER EQUALS NUMBER SEMICOLON

typeDefns: /* empty */
         | TYPES typeList
typeList: typeList typeDefn 
        | typeDefn
typeDefn: IDENTIFIER EQUALS typeDenoter SEMICOLON
typeDenoter: INTEGER
           | IDENTIFIER
           | newType
newType: arrayType
       | recordType
arrayType: ARRAY SQBR_ON NUMBER SQBR_OFF OF typeDenoter
recordType: RECORD recordItemList END
recordItemList: recordItemList SEMICOLON recordItem 
              | recordItem
              | error
recordItem: identifierList COLON typeDenoter
identifierList: identifierList COMMA IDENTIFIER
              | IDENTIFIER

varDefns: /* empty */
        | VAR varDefnList
varDefnList: varDefnList varDefn
           | varDefn SEMICOLON
           | error SEMICOLON
varDefn: identifierList COLON typeDenoter

procFuncDefns: /* empty */
             | procFuncDefnList SEMICOLON
procFuncDefnList: procFuncDefnList SEMICOLON procFuncDefn 
                | procFuncDefn
procFuncDefn: procDefn | funcDefn
procDefn: procHead SEMICOLON FORWARD
        | procHead SEMICOLON block
procHead: PROCEDURE IDENTIFIER
        | PROCEDURE IDENTIFIER formalParamList
funcDefn: funcHead SEMICOLON FORWARD
        | funcHead SEMICOLON block
funcHead: FUNCTION IDENTIFIER COLON returnType
        | FUNCTION IDENTIFIER formalParamList COLON returnType
returnType: INTEGER
          | IDENTIFIER
formalParamList: PAR_ON formalParamSecList PAR_OFF
formalParamSecList: formalParamSecList SEMICOLON formalParam
                  | formalParam
                  | error 
formalParam: valueParam 
           | variableParam
valueParam: identifierList COLON returnType
variableParam: VAR identifierList COLON returnType

stmts: CURLY_ON stmtList CURLY_OFF 
stmtList: stmtList SEMICOLON stmt 
        | stmt
        | error
stmt: assignmentStmt
    | ioStmt
    | procStmt
    | stmts
    | ifStmt
    | whileStmt
    | forStmt

assignmentStmt: variableAccess EQUALS expr
variableAccess: IDENTIFIER { $$.node = var_access($1.str); }
              | indexedVariable { $$.node = $1.node; }
              | fieldDesignator { $$.node = $1.node; }

indexedVariable: variableAccess SQBR_ON indexExprList SQBR_OFF { $$.node = indexed_node($1.node, $2.ns); }
indexExprList: indexExprList COMMA expr { $1.ns->push_back($2.node); }
             | expr { $$.ns = new std::vector<ast_node_t*>(); $$.ns->push_back($1.node); }
             | error

fieldDesignator: variableAccess DOT IDENTIFIER { $$.node = field_node($1.node, $2.str); }
               | variableAccess DOT error
ioStmt: PRINT PAR_ON variableAccess PAR_OFF
      | READ PAR_ON variableAccess PAR_OFF

procStmt: IDENTIFIER params
params: PAR_ON paramList PAR_OFF { $$.ns = $1.ns; }
      | PAR_ON PAR_OFF { $$.ns = new std::vector<ast_node_t*>; }
paramList: paramList COMMA expr { $1.ns->push_back($2.node); }
         | expr { $$.ns = new std::vector<ast_node_t*>(); $$.ns->push_back($1.node); }

ifStmt: IF condExpr THEN stmt
      | IF condExpr THEN stmt ELSE stmt

whileStmt: WHILE condExpr DO stmt

condExpr: expr relop expr
        | expr 
relop: EQ | NEQ | GT | LT | GEQ | LEQ

forStmt: FOR IDENTIFIER COLON_EQ expr direction expr DO stmt
direction: UPTO | DOWNTO

expr: expr PLUS term { $$.node = expr($1.node, $3.node, '+'); }
    | expr MINUS term { $$.node = expr($1.node, $3.node, '+'); }
    | term { $$.node = $1.node; }
term: term MULT factor { $$.node = term($1.node, $3.node, '*'); }
    | term DIV factor { $$.node = term($1.node, $3.node, '/'); }
    | term MOD factor { $$.node = term($1.node, $3.node, '%'); }
    | factor { $$.node = $1.node; }
factor: PAR_ON expr PAR_OFF { $$.node = factor_paren($2.node); }
      | functionCall { $$.node = factor_fn($1.node); }
      | variableAccess { $$.node = factor_varacc($1.node); }
      | NUMBER { $$.node = factor_num($1.n); }
      | error

functionCall: IDENTIFIER params { $$.node = fn_call($1.str, $2.ns); }
